import de.undercouch.gradle.tasks.download.Download

plugins {
    id "de.undercouch.download" version "3.1.2"
    id "nebula.ospackage" version "4.1.0"
}
repositories {
    jcenter()
}

def resourcesDir = "resources/"
def debResourcesDir = resourcesDir + "deb/"

ospackage {
    arch = "all"
    os = LINUX
    packager = "openHAB &lt;admin@openhab.org&gt;"
    distribution = "development"
    vendor = "openhab.org"
    url = "www.openhab.org"
    
    //installUtils file('scripts/rpm/utils.sh')
    preInstall file(resourcesDir + 'deb/control-runtime/preinst')
    postInstall file(resourcesDir + 'deb/control-runtime/postinst')
    preUninstall file(resourcesDir + 'deb/control-runtime/prerm')
    postUninstall file(resourcesDir + 'deb/control-runtime/postrm')
    
    configurationFile('/etc/default/openhab2')

    requires('adduser')

    user = 'openhab'
    permissionGroup = 'openhab'
}

def timestamp = new Date().format('yyyyMMddHHmmss')
def distributions = [
                        [ "dist": "openhab2-offline-b5",
                         "packageName": "openhab2-offline",
                         "url": "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab-offline%2F2.0.0.b4%2Fopenhab-offline-2.0.0.b4.tar.gz",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-offline-2.0.0.b4.tar.gz',
                         "conflicts": ["openhab2-online"],
                         "version": "2.0.0.b5",
                         "release": '1'
                        ],
                        ["dist": "openhab2-online-b5",
                         "packageName": "openhab2-online",
                         "url": "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab-online%2F2.0.0.b4%2Fopenhab-online-2.0.0.b4.tar.gz",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-online-2.0.0.b4.tar.gz',
                         "conflicts": ["openhab2-offline"],
                         "version": "2.0.0.b5",
                         "release": '1'
                        ],
                        ["dist": "openhab2-offline-snapshot",
                         "packageName": "openhab2-offline",
                         "url": "https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab-offline/target/openhab-offline-2.0.0-SNAPSHOT.tar.gz",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-offline-SNAPSHOT.tar.gz',
                         "conflicts": ["openhab2-online"],
                         "version": "2.0.0." + timestamp,
                         "release": '1'
                        ],
                        ["dist": "openhab2-online-snapshot",
                         "packageName": "openhab2-online",
                         "url": "https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab-online/target/openhab-online-2.0.0-SNAPSHOT.tar.gz",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-online-SNAPSHOT.tar.gz',
                         "conflicts": ["openhab2-offline"],
                         "version": "2.0.0." + timestamp,
                         "release": '1'
                        ]
                    ]

def generate_distro_tasks = { dist, gPackageName, gInputFile, gVersion, gRelease, gConflicts ->
    task "distro-${dist}"(type: Deb, dependsOn: "download-${dist}") {
        //conflicts = gConflicts
        release = gRelease
        packageName = gPackageName
        version = gVersion
        /**
        * Suck up all the empty directories that we need to install into the path.
        */
        Closure suckUpEmptyDirectories = { path, u, g, mode ->
            into(path) {
            from "${debResourcesDir}dirs${path}"
            user u
            permissionGroup g
            dirMode mode
            fileMode mode
            }
        }

        FileTree tar = tarTree(gInputFile)
        suckUpEmptyDirectories('/var/log/openhab2', user, permissionGroup, 0755)
        suckUpEmptyDirectories('/var/lib/openhab2/persistence/db4o', user, permissionGroup, 0755)
        suckUpEmptyDirectories('/var/lib/openhab2/persistence/rrd4j', user, permissionGroup, 0755)
        suckUpEmptyDirectories('/var/lib/openhab2/persistence/mapdb', user, permissionGroup, 0755)
        suckUpEmptyDirectories('/usr/share/openhab2/bin', user, permissionGroup, 0755)
        from(debResourcesDir + 'etc/default/openhab2'){
            user 'root'
            permissionGroup 'root'
            fileMode 0644
            into '/etc/default'
        }
        from(debResourcesDir + 'bin/setpermissions.sh'){
            user 'root'
            permissionGroup 'root'
            fileMode 0775
            into '/usr/share/openhab2/bin'
        }
        from(debResourcesDir + 'systemd/openhab2.service'){
            fileMode 0644
            user 'root'
            permissionGroup 'root'
            into '/usr/lib/systemd/system'
        }
        from(tar){
            into '/usr/share/openhab2'
            exclude 'conf/**'
            exclude 'userdata/**'
            exclude 'runtime/bin/oh2_dir_layout'
            exclude 'start.bat'
            exclude 'start_debug.bat'
        }
        from(tar){
            into '/etc/openhab2'
            include 'conf/**'
            eachFile { details ->
                def pkgPath = details.path - 'conf'
                details.path = pkgPath
                configurationFile(details.path)
            }
        }
        from(tar){
            into '/var/lib/openhab2'
            include 'userdata/**'
            eachFile { details ->
                def pkgPath = details.path - 'userdata'
                details.path = pkgPath
                configurationFile(details.path)
            }
        }
        from(debResourcesDir + 'bin/oh2_dir_layout'){
            fileMode 0775
            into '/usr/share/openhab2/runtime/bin'
        }
    }
}

distributions.each { dist -> generate_distro_tasks(dist.dist, dist.packageName, dist.path, 
                        dist.version, dist.release, dist.conflicts)}

task packageDistros(dependsOn: tasks.findAll { t -> t.name.startsWith("distro-")})

task buildSnapshot(dependsOn: tasks.findAll { t -> t.name.endsWith("-snapshot")})

task buildBeta4(dependsOn: tasks.findAll { t -> t.name.endsWith("-b4")})

def generate_download_tasks = { dist, url, path -> 
    task "download-${dist}"(type: Download) { 
        onlyIfNewer true
        src url
        dest new File(path)
    }
}

distributions.each { dist -> generate_download_tasks(dist.dist, dist.url, dist.path)}

task downloadDistros(dependsOn: tasks.findAll {t -> t.name.startsWith("download-")} << {})
