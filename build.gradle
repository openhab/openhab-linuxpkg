import de.undercouch.gradle.tasks.download.Download
import groovy.json.JsonSlurper

plugins {
    id "de.undercouch.download" version "3.1.2"
    id "nebula.ospackage" version "4.1.0"
}
repositories {
    jcenter()
}

def resourcesDir = "resources/"
def debResourcesDir = resourcesDir + "deb/"

def BINTRAY_ORG     = project.hasProperty('bintrayOrg') ? project.property('bintrayOrg') : System.env.BINTRAY_ORGANISATION
BINTRAY_ORG     = BINTRAY_ORG ?: "openhab"
def BINTRAY_REPO    = project.hasProperty('bintrayRepo') ? project.property('bintrayRepo') : System.env.BINTRAY_REPO
BINTRAY_REPO    = BINTRAY_REPO ?: "apt-repo2"
def BINTRAY_PACKAGE = project.hasProperty('bintrayPackage') ? project.property('bintrayPackage') : System.env.BINTRAY_PACKAGE
BINTRAY_PACKAGE = BINTRAY_PACKAGE ?: "openhab2"
def BINTRAY_ARCH    = "all,armhf,armel,mips,arm64"
def BINTRAY_USER    = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.env.BINTRAY_USER
def BINTRAY_KEY     = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.env.BINTRAY_API_KEY
def BINTRAY_GPG     = project.hasProperty('bintrayGpg') ? project.property('bintrayGpg') : System.env.BINTRAY_API_GPG

def OSPACKAGE_ARCH  = "all"

ospackage {
    arch = "${OSPACKAGE_ARCH}"
    os = LINUX
    packager = "https://github.com/openhab/openhab-linuxpkg"
    maintainer = "https://community.openhab.org"
    vendor = "openHAB Foundation"
    url = "www.openhab.org"

    conflicts('openhab2-online')
    conflicts('openhab2-offline')

    user = 'openhab'
    permissionGroup = 'openhab'
}

def timestamp = new Date().format('yyyyMMddHHmmss')
def distributions = [
                        ["dist": "openhab2-offline-b5",
                         "description": "Linux installation package for the offline Beta-5 version of openHAB 2.",
                         "debDist": "testing",
                         "packageName": "openhab2-offline",
                         "url": "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab-offline%2F2.0.0.b5%2Fopenhab-offline-2.0.0.b5.tar.gz",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-offline-2.0.0.b5.tar.gz',
                         "version": "2.0.0~b5",
                         "release": '1'
                        ],
                        ["dist": "openhab2-online-b5",
                         "description": "Linux installation package for the online Beta-5 version of openHAB 2.",
                         "debDist": "testing",
                         "packageName": "openhab2-online",
                         "url": "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab-online%2F2.0.0.b5%2Fopenhab-online-2.0.0.b5.tar.gz",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-online-2.0.0.b5.tar.gz',
                         "version": "2.0.0~b5",
                         "release": '1'
                        ],
                        ["dist": "openhab2-snapshot",
                         "description": "Linux installation package for openHAB 2.",
                         "debDist": "unstable",
                         "packageName": "openhab2",
                         "url": "https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab/target/openhab-2.0.0-SNAPSHOT.tar.gz",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-2.0.0-SNAPSHOT.tar.gz',
                         "version": "2.0.0~" + timestamp,
                         "release": '1'
                        ],
                        ["dist": "openhab2-addons-snapshot",
                         "description": "Linux installation package for openHAB 2 addons.",
                         "debDist": "unstable",
                         "packageName": "openhab2-addons",
                         "url": "https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab-addons/target/openhab-addons-2.0.0-SNAPSHOT.kar",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-addons-2.0.0-SNAPSHOT.kar',
                         "version": "2.0.0~" + timestamp,
                         "release": '1'
                        ],
                        ["dist": "openhab2-addons-legacy-snapshot",
                         "description": "Linux installation package for legacy openHAB 2 addons.",
                         "debDist": "unstable",
                         "packageName": "openhab2-addons-legacy",
                         "url": "https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab-addons-legacy/target/openhab-addons-legacy-2.0.0-SNAPSHOT.kar",
                         "path": buildDir.getAbsolutePath() + '/' + 'openhab-addons-legacy-2.0.0-SNAPSHOT.kar',
                         "version": "2.0.0~" + timestamp,
                         "release": '1'
                        ]
                    ]

def generate_distro_tasks = { dist, gDescription, gPackageName, gInputFile, gVersion, gRelease, gDebDist ->
    task "distro-${dist}"(type: Deb, dependsOn: "download-${dist}") {
        release = gRelease
        packageName = gPackageName
        version = gVersion
        distribution = gDebDist
        packageDescription = gDescription

        /**
        * Suck up all the empty directories that we need to install into the path.
        */
        Closure suckUpEmptyDirectories = { path, u, g, mode ->
            into(path) {
            from "${debResourcesDir}dirs${path}"
            user u
            permissionGroup g
            dirMode mode
            fileMode mode
            }
        }

	if (dist.contains("addons")){
            requires('openhab2')
            from(gInputFile) {
                into 'usr/share/openhab2/addons'
            }
        } else {
            preInstall file(resourcesDir + 'deb/control-runtime/preinst')
            postInstall file(resourcesDir + 'deb/control-runtime/postinst')
            preUninstall file(resourcesDir + 'deb/control-runtime/prerm')
            postUninstall file(resourcesDir + 'deb/control-runtime/postrm')

            configurationFile('/etc/default/openhab2')
            configurationFile('/usr/lib/systemd/system/openhab2.service')

            requires('adduser')

            FileTree tar = tarTree(gInputFile)
            suckUpEmptyDirectories('/var/log/openhab2', user, permissionGroup, 0755)
            suckUpEmptyDirectories('/var/lib/openhab2/persistence/db4o', user, permissionGroup, 0755)
            suckUpEmptyDirectories('/var/lib/openhab2/persistence/rrd4j', user, permissionGroup, 0755)
            suckUpEmptyDirectories('/var/lib/openhab2/persistence/mapdb', user, permissionGroup, 0755)
            suckUpEmptyDirectories('/usr/share/openhab2/bin', user, permissionGroup, 0755)
            from(debResourcesDir + 'etc/default/openhab2'){
                user 'root'
                permissionGroup 'root'
                fileMode 0644
                into '/etc/default'
            }
            from(debResourcesDir + 'bin/setpermissions.sh'){
                user 'root'
                permissionGroup 'root'
                fileMode 0775
                into '/usr/share/openhab2/bin'
            }
            from(debResourcesDir + 'systemd/openhab2.service'){
                fileMode 0644
                user 'root'
                permissionGroup 'root'
                into '/usr/lib/systemd/system'
            }
            from(debResourcesDir + 'etc/init.d/openhab2'){
                fileMode 0775
                user 'root'
                permissionGroup 'root'
                into '/etc/init.d/'
            }
            from(tar){
                into '/usr/share/openhab2'
                exclude 'conf/**'
                exclude 'userdata/**'
                exclude 'runtime/bin/oh2_dir_layout'
                exclude 'start.bat'
                exclude 'start_debug.bat'
            }
            from(tar){
                into '/etc/openhab2'
                include 'conf/**'
                eachFile { details ->
                    def pkgPath = details.path - 'conf'
                    details.path = pkgPath
                    configurationFile(details.path)
                }
            }
            from(tar){
                into '/var/lib/openhab2'
                include 'userdata/**'
                exclude 'userdata/etc/startup.properties'
                exclude 'userdata/etc/config.properties'
                exclude 'userdata/etc/distribution.info'
                exclude 'userdata/etc/jre.properties'
                exclude 'userdata/etc/org.apache.karaf.*'
                exclude 'userdata/etc/profile.cfg'
                exclude 'userdata/etc/branding.properties'
                eachFile { details ->
                    def pkgPath = details.path - 'userdata'
                    details.path = pkgPath
                    configurationFile(details.path)
                }
            }
            from(tar){
                into '/var/lib/openhab2'
                include 'userdata/etc/startup.properties'
                include 'userdata/etc/config.properties'
                include 'userdata/etc/distribution.info'
                include 'userdata/etc/jre.properties'
                include 'userdata/etc/org.apache.karaf.*'
                include 'userdata/etc/profile.cfg'
                include 'userdata/etc/branding.properties'
                eachFile { details ->
                    def pkgPath = details.path - 'userdata'
                    details.path = pkgPath
                }
            }

            from(debResourcesDir + 'bin/oh2_dir_layout'){
                fileMode 0775
                into '/usr/share/openhab2/runtime/bin'
            }
        }
    }

    task "upload-${dist}"(type:Exec, dependsOn: "distro-${dist}") {
            
        def fileName = "${gPackageName}_${gVersion}-${gRelease}_${OSPACKAGE_ARCH}.deb"
        def curlURL = "https://api.bintray.com/content/${BINTRAY_ORG}/${BINTRAY_REPO}/${BINTRAY_PACKAGE}/${gVersion}/pool/main/${gVersion}/${fileName};deb_distribution=${gDebDist};deb_component=main;deb_architecture=${BINTRAY_ARCH};publish=1"

        executable "curl"
        args "-X", "PUT", "-H", "X-GPG-PASSPHRASE: ${BINTRAY_GPG}", "-T", "build/distributions/${fileName}", "-u${BINTRAY_USER}:${BINTRAY_KEY}", "${curlURL}"
        standardOutput = new ByteArrayOutputStream()
        doLast {
            println standardOutput.toString()
            def jsonSlurper = new JsonSlurper()
            def object = jsonSlurper.parseText(standardOutput.toString())
            def success =  object.message != null ? object.message == 'success' : false
            if (! success){
                throw new GradleException("upload failed: " + object.message)
            }
        }
    }
}

distributions.each { dist -> generate_distro_tasks(dist.dist, dist.description, dist.packageName,
                          dist.path, dist.version, dist.release, dist.debDist)}

task calculateMetadata(type:Exec) {
     executable "curl"
     args "-X", "POST", "-H", "X-GPG-PASSPHRASE: ${BINTRAY_GPG}", "-u${BINTRAY_USER}:${BINTRAY_KEY}", "https://api.bintray.com/calc_metadata/${BINTRAY_ORG}/${BINTRAY_REPO}"
}

task packageDistros(dependsOn: tasks.findAll { t -> t.name.startsWith("distro-")})

task buildSnapshot(dependsOn: tasks.findAll { t -> t.name.endsWith("-snapshot")})

task buildBeta5(dependsOn: tasks.findAll { t -> t.name.endsWith("-b5")})

def generate_download_tasks = { dist, url, path -> 
    task "download-${dist}"(type: Download) { 
        onlyIfNewer true
        src url
        dest new File(path)
    }
}

distributions.each { dist -> generate_download_tasks(dist.dist, dist.url, dist.path)}

task downloadDistros(dependsOn: tasks.findAll {t -> t.name.startsWith("download-")} << {})
