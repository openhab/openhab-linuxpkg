import de.undercouch.gradle.tasks.download.Download
import groovy.json.JsonSlurper

buildscript {
  dependencies{
    classpath fileTree(dir: 'libs', include: '*jar')
    classpath 'org.apache.commons:commons-lang3:3.1'
    classpath 'org.vafer:jdeb:1.4'
    classpath 'com.bmuschko:gradle-docker-plugin:3.0.1'
  }
}

plugins {
  id "de.undercouch.download" version "3.1.2"
}

apply plugin: "nebula.ospackage"

def ARTIFACTORY_ORG = project.hasProperty('artifactoryOrg') ? project.property('artifactoryOrg') : System.env.ARTIFACTORY_ORGANISATION
def ARTIFACTORY_REPO = project.hasProperty('artifactoryRepo') ? project.property('artifactoryRepo') : System.env.ARTIFACTORY_REPO
def ARTIFACTORY_KEY = project.hasProperty('artifactoryKey') ? project.property('artifactoryKey') : System.env.ARTIFACTORY_API_KEY

def ARTIFACTORY_GPG = project.hasProperty('artifactoryGpg') ? project.property('artifactoryGpg') : System.env.ARTIFACTORY_API_GPG
def ARTIFACTORY_GPG_KEY = project.hasProperty('artifactoryGpgKey') ? project.property('artifactoryGpgKey') : System.env.ARTIFACTORY_GPG_KEY
def ARTIFACTORY_GPG_KEY_ID = project.hasProperty('artifactoryGpgKeyId') ? project.property('artifactoryGpgKeyId') : System.env.ARTIFACTORY_GPG_KEY_ID

ARTIFACTORY_ORG = ARTIFACTORY_ORG ?: 'openhab'
ARTIFACTORY_REPO = ARTIFACTORY_REPO ?: 'openhab-linuxpkg'
ARTIFACTORY_GPG_KEY_ID = ARTIFACTORY_GPG_KEY_ID ?: 'A224060A' 

def OHVersion = project.hasProperty('openHABVersion') ? project.property('openHABVersion') : System.env.OPENHAB_VERSION
def OHTestingVersion = project.hasProperty('openHABTestingVersion') ? project.property('openHABTestingVersion') : System.env.OPENHAB_TESTING_VERSION
def OHSnapVersion = project.hasProperty('openHABSnapshotVersion') ? project.property('openHABSnapshotVersion') : System.env.OPENHAB_SNAPSHOT_VERSION

OHVersion = OHVersion ?: '2.1.0'
OHTestingVersion = OHTestingVersion ?: '2.0.0.RC1'
OHSnapVersion = OHSnapVersion ?: '2.2.0'

def OSPACKAGE_ARCH = "all"

def architectures = [
  'all',
  'armhf',
  'armel',
  'mips',
  'arm64'
]

def packageTypes = [
  'Deb',
  'Rpm'
]

ospackage {
  os = LINUX
  packager = "https://github.com/openhab/openhab-linuxpkg"
  maintainer = "https://community.openhab.org"
  vendor = "openHAB Foundation"
  url = "www.openhab.org"

  conflicts('openhab2-online')
  conflicts('openhab2-offline')

  user = 'openhab'
  permissionGroup = 'openhab'

  signingKeyId = "${ARTIFACTORY_GPG_KEY_ID}"
  signingKeyPassphrase = "${ARTIFACTORY_GPG}"
  signingKeyRingFile = new File("${ARTIFACTORY_GPG_KEY}")
  signatureSize = 543
}

def timestamp = new Date().format('yyyyMMddHHmmss')
def distributions = [
  [
    "dist":        'openhab2-release',
    "description": 'Linux installation package for openHAB 2.',
    "debDist":     ['stable','testing','unstable'],
    "packageName": 'openhab2',
    "url":         "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab%2F${OHVersion}%2Fopenhab-${OHVersion}.tar.gz",
    "path":        buildDir.getAbsolutePath() + '/' + "openhab-${OHVersion}.tar.gz",
    "version":     "${OHVersion}",
    "release":     '1'
  ],[
    'dist':        'openhab2-addons-release',
    'description': 'Linux installation package for openHAB 2 addons.',
    'debDist':     ['stable','testing','unstable'],
    'packageName': 'openhab2-addons',
    'url':         "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab-addons%2F${OHVersion}%2Fopenhab-addons-${OHVersion}.kar",
    'path':        buildDir.getAbsolutePath() + '/' + "openhab-addons-${OHVersion}.kar",
    'version':     "${OHVersion}",
    'release':     '1'
  ],[
    'dist':        'openhab2-addons-legacy-release',
    'description': 'Linux installation package for legacy openHAB 2 addons.',
    'debDist':     ['stable','testing','unstable'],
    'packageName': 'openhab2-addons-legacy',
    'url':         "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab-addons-legacy%2F${OHVersion}%2Fopenhab-addons-legacy-${OHVersion}.kar",
    'path':        buildDir.getAbsolutePath() + '/' + "openhab-addons-legacy-${OHVersion}.kar",
    'version':     "${OHVersion}",
    'release':     '1'
  ],[
    "dist":        'openhab2-testing',
    "description": 'Linux installation package for openHAB 2.',
    "debDist":     ['testing','unstable'],
    "packageName": 'openhab2',
    "url":         "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab%2F${OHTestingVersion}%2Fopenhab-${OHTestingVersion}.tar.gz",
    "path":        buildDir.getAbsolutePath() + '/' + "openhab-${OHTestingVersion}.tar.gz",
    "version":     "${OHTestingVersion}",
    "release":     '1'
  ],[
    'dist':        'openhab2-addons-testing',
    'description': 'Linux installation package for openHAB 2 addons.',
    'debDist':     ['testing','unstable'],
    'packageName': 'openhab2-addons',
    'url':         "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab-addons%2F${OHTestingVersion}%2Fopenhab-addons-${OHTestingVersion}.kar",
    'path':        buildDir.getAbsolutePath() + '/' + "openhab-addons-${OHTestingVersion}.kar",
    'version':     "${OHTestingVersion}",
    'release':     '1'
  ],[
    'dist':        'openhab2-addons-legacy-testing',
    'description': 'Linux installation package for legacy openHAB 2 addons.',
    'debDist':     ['testing','unstable'],
    'packageName': 'openhab2-addons-legacy',
    'url':         "https://bintray.com/openhab/mvn/download_file?file_path=org%2Fopenhab%2Fdistro%2Fopenhab-addons-legacy%2F${OHTestingVersion}%2Fopenhab-addons-legacy-${OHTestingVersion}.kar",
    'path':        buildDir.getAbsolutePath() + '/' + "openhab-addons-legacy-${OHTestingVersion}.kar",
    'version':     "${OHTestingVersion}",
    'release':     '1'
  ],[
    'dist':        'openhab2-snapshot',
    'description': 'Linux installation package for openHAB 2.',
    'debDist':     ['unstable'],
    'packageName': 'openhab2',
    'url':         "https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab/target/openhab-${OHSnapVersion}-SNAPSHOT.tar.gz",
    'path':        buildDir.getAbsolutePath() + '/' + "openhab-${OHSnapVersion}-SNAPSHOT.tar.gz",
    'version':     "${OHSnapVersion}~" + timestamp,
    'release':     '1'
  ],[
    'dist':        'openhab2-addons-snapshot',
    'description': 'Linux installation package for openHAB 2 addons.',
    'debDist':     ['unstable'],
    'packageName': 'openhab2-addons',
    'url':         "https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab-addons/target/openhab-addons-${OHSnapVersion}-SNAPSHOT.kar",
    'path':        buildDir.getAbsolutePath() + '/' + "openhab-addons-${OHSnapVersion}-SNAPSHOT.kar",
    'version':     "${OHSnapVersion}~" + timestamp,
    'release':     '1'
  ],[
    'dist':        'openhab2-addons-legacy-snapshot',
    'description': 'Linux installation package for legacy openHAB 2 addons.',
    'debDist':     ['unstable'],
    'packageName': 'openhab2-addons-legacy',
    'url':         "https://openhab.ci.cloudbees.com/job/openHAB-Distribution/lastSuccessfulBuild/artifact/distributions/openhab-addons-legacy/target/openhab-addons-legacy-${OHSnapVersion}-SNAPSHOT.kar",
    'path':        buildDir.getAbsolutePath() + '/' + "openhab-addons-legacy-${OHSnapVersion}-SNAPSHOT.kar",
    'version':     "${OHSnapVersion}~" + timestamp,
    'release':     '1'
  ]
]

def generate_distro_tasks = { dist, gDescription, gPackageName, gInputFile, gVersion, gRelease, gDebDist ->

  def topDist = gDebDist.first()

  packageTypes.each { pType -> 
    def packageType = Deb
    if (pType == 'Rpm') { packageType = Rpm }
    
    task "distro-${pType}-${dist}"(type: packageType, dependsOn: "download-${dist}") {
      if (pType == 'Deb') { arch = "${OSPACKAGE_ARCH}" }
      release = gRelease
      packageName = gPackageName
      if (pType == 'Rpm') {
        gVersion = gVersion.replaceAll('~','.')
      }

      version = gVersion
      distribution = topDist
      packageDescription = gDescription

      /**
      * Suck up all the empty directories that we need to install into the path.
      */
      Closure suckUpEmptyDirectories = { path, u, g, mode ->
        into(path) {
          from "resources/dirs${path}"
          user u
          permissionGroup g
          dirMode mode
          fileMode mode
        }
      }

      if (dist.contains('addons')){
        requires('openhab2')
        from(gInputFile) {
          if (pType == 'Rpm') {addParentDirs=false}
          into 'usr/share/openhab2/addons'
        }
      } else {
        preInstall file('resources/control-runtime/preinst')
        postInstall file('resources/control-runtime/postinst')
        preUninstall file('resources/control-runtime/prerm')
        postUninstall file('resources/control-runtime/postrm')

        configurationFile('/etc/default/openhab2')
        configurationFile('/etc/profile.d/openhab2.sh')

        if (pType == 'Deb') {
          requires('adduser')
        }

        recommends('oracle-java8-installer | zulu-8 | zulu-embedded-8 | openjdk-8-jdk-headless')

        FileTree tar = tarTree(gInputFile)
        suckUpEmptyDirectories('/var/log/openhab2', user, permissionGroup, 0755)
        suckUpEmptyDirectories('/var/lib/openhab2/persistence/db4o', user, permissionGroup, 0755)
        suckUpEmptyDirectories('/var/lib/openhab2/persistence/rrd4j', user, permissionGroup, 0755)
        suckUpEmptyDirectories('/var/lib/openhab2/persistence/mapdb', user, permissionGroup, 0755)
        suckUpEmptyDirectories('/usr/share/openhab2/bin', user, permissionGroup, 0755)

        from('resources/etc/default/openhab2'){
          fileType CONFIG | NOREPLACE
          user 'root'
          permissionGroup 'root'
          fileMode 0644
          into '/etc/default/'
        }
        from('resources/etc/profile.d/openhab2.sh'){
          fileType CONFIG | NOREPLACE
          fileMode 0644
          user 'root'
          permissionGroup 'root'
          into '/etc/profile.d/'
        }
        from('resources/systemd/openhab2.service'){
          fileMode 0644
          user 'root'
          permissionGroup 'root'
          into '/usr/lib/systemd/system/'
        }
        if (pType == 'Deb') {
          from('resources/etc/init.d/deb/openhab2'){
            fileMode 0775
            user 'root'
            permissionGroup 'root'
            into '/etc/init.d/'
          }
        } else {
          from('resources/etc/init.d/rpm/openhab2'){
            fileMode 0775
            user 'root'
            permissionGroup 'root'
            into '/etc/init.d/'
          }
        }
        from(tar){
          into '/usr/share/openhab2'
          exclude 'conf/**'
          exclude 'userdata/**'
          exclude 'start.bat'
          exclude 'start_debug.bat'
        }
        from(tar){
          fileType CONFIG | NOREPLACE
          into '/etc/openhab2'
          include 'conf/**'
          eachFile { details ->
            def pkgPath = details.path - 'conf'
            details.path = pkgPath
            configurationFile(details.path)
          }
        }
        from(tar){
          fileType CONFIG | NOREPLACE
          into '/var/lib/openhab2'
          include 'userdata/**'
          exclude 'userdata/etc/all.policy'
          exclude 'userdata/etc/startup.properties'
          exclude 'userdata/etc/config.properties'
          exclude 'userdata/etc/distribution.info'
          exclude 'userdata/etc/jre.properties'
          exclude 'userdata/etc/org.apache.karaf.*'
          exclude 'userdata/etc/org.ops4j.pax.url.mvn.cfg'
          exclude 'userdata/etc/profile.cfg'
          exclude 'userdata/etc/branding.properties'
          exclude 'userdata/etc/branding-ssh.properties'
          exclude 'userdata/etc/custom.properties'
          exclude 'userdata/etc/version.properties'
          eachFile { details ->
            def pkgPath = details.path - 'userdata'
            details.path = pkgPath
            configurationFile(details.path)
          }
        }
        from(tar){
          into '/var/lib/openhab2'
          include 'userdata/etc/all.policy'
          include 'userdata/etc/startup.properties'
          include 'userdata/etc/config.properties'
          include 'userdata/etc/distribution.info'
          include 'userdata/etc/jre.properties'
          include 'userdata/etc/org.apache.karaf.*'
          include 'userdata/etc/org.ops4j.pax.url.mvn.cfg'
          include 'userdata/etc/profile.cfg'
          include 'userdata/etc/branding.properties'
          include 'userdata/etc/branding-ssh.properties'
          include 'userdata/etc/custom.properties'
          include 'userdata/etc/version.properties'
          eachFile { details ->
            def pkgPath = details.path - 'userdata'
            details.path = pkgPath
          }
        }
      }
    }

    task "upload-${pType}-${dist}"(type:Exec, dependsOn: "distro-${pType}-${dist}") {
      def debArchs = ''
      def debDists = ''
      def curlURL = ''
      def fileName = ''
      def curlOptions = ''

      if (pType == 'Deb') {
        architectures.each {arch -> debArchs = debArchs + "deb.architecture=${arch};"}
        gDebDist.each {singleDebDist -> debDists = debDists + "deb.distribution=${singleDebDist};"}
        fileName = "${gPackageName}_${gVersion}-${gRelease}_${OSPACKAGE_ARCH}.deb"
        curlURL = "https://openhab.jfrog.io/${ARTIFACTORY_ORG}/${ARTIFACTORY_REPO}/pool/main/${gVersion}/${fileName}"
        curlOptions = "{$debDists};deb.component=main;${debArchs};artifactory.licenses=Eclipse-1.0"
      } else if (pType == 'Rpm') {
        fileName = "${gPackageName}-${gVersion}-${gRelease}.noarch.rpm"
        curlURL = "https://openhab.jfrog.io/${ARTIFACTORY_ORG}/${ARTIFACTORY_REPO}-rpm/${topDist}/${gVersion}/${fileName}"
        curlOptions = 'artifactory.licenses=Eclipse-1.0'
      }
      
      executable 'curl'
      args '-X', 'PUT', "${curlURL};${curlOptions}", '-H', "X-JFrog-Art-Api: ${ARTIFACTORY_KEY}", '-H', "X-GPG-PASSPHRASE: ${ARTIFACTORY_GPG}", '-T', "build/distributions/${fileName}"
      standardOutput = new ByteArrayOutputStream()
      
      doLast {
        println standardOutput.toString()
        def jsonSlurper = new JsonSlurper()
        def object = jsonSlurper.parseText(standardOutput.toString())
        def success =  object.uri != null ? object.uri == "${curlURL}" : false
        if (! success){
          throw new GradleException('upload failed: ' + object.message)
        }
      }
    }
  }
}

distributions.each { dist -> generate_distro_tasks(dist.dist, dist.description, dist.packageName,
                    dist.path, dist.version, dist.release, dist.debDist)}

task packageDistros(dependsOn: tasks.findAll { t -> t.name.startsWith('distro-')}) {
  description = 'Builds all the packages available for the distribution.'
  group = 'openHAB Package'
}

task buildSnapshot(dependsOn: tasks.findAll { t -> t.name.endsWith('-snapshot')}) {
  description = 'Performs all major tasks for the snapshot repos: Download -> Build -> Upload.'
  group = 'openHAB Main'
}

task buildTesting(dependsOn: tasks.findAll { t -> t.name.endsWith('-testing')}) {
  description = 'Performs all major tasks for the testing repos: Download -> Build -> Upload.'
  group = 'openHAB Main'
}

task buildRelease(dependsOn: tasks.findAll { t -> t.name.endsWith("-release")}){
  description = 'Performs all major tasks for the Release (stable) repos: Download -> Build -> Upload.'
  group = 'openHAB Main' 
}

def generate_download_tasks = { dist, url, path -> 
  task "download-${dist}"(type: Download) { 
    onlyIfNewer true
    src url
    dest new File(path)
  }
}

distributions.each { dist -> generate_download_tasks(dist.dist, dist.url, dist.path)}

task downloadDistros(dependsOn: tasks.findAll {t -> t.name.startsWith("download-")} << {})

task removeOlderVersions(type:Exec) {
  def expiryDays = 7
  def expiryEpoch = System.currentTimeMillis() - (86400000 * expiryDays)

  description = "Deletes packages older than ${expiryDays} days from the target repo."
  group = 'openHAB Cleanup'

  executable 'curl'
  args '-X', 'GET', '-H', "X-JFrog-Art-Api: ${ARTIFACTORY_KEY}", "https://openhab.jfrog.io/${ARTIFACTORY_ORG}/api/search/usage?notUsedSince=${expiryEpoch}&repos=${ARTIFACTORY_REPO},${ARTIFACTORY_REPO}-rpm"
  standardOutput = new ByteArrayOutputStream()
  errorOutput = new ByteArrayOutputStream()

  doLast {
    def jsonSluper = new JsonSlurper()
    def jsonText = jsonSluper.parseText(standardOutput.toString())

    if (jsonText.errors) {
      def errortext=jsonText.errors.message.toString()

      if (errortext == '[No results found.]') {
        println "Cleanup found no versions older than ${expiryDays} days!"
      } else {
        throw new GradleException('Cleanup failed: ' + errortext)
      }
    } else {
      def matches = jsonText.results
      def foldersToDelete = []

      matches.each { object ->
        def matchedURL = object.uri

        if ((matchedURL.contains('~') || matchedURL.contains('unstable')) && (matchedURL.contains('.deb') || matchedURL.contains('.rpm'))) {
          def matchedFolder = matchedURL.substring(0,matchedURL.lastIndexOf('/'))
          def matchedLocation = matchedFolder - 'api/storage/'

          if (! foldersToDelete.contains(matchedLocation)) {
            foldersToDelete.add(matchedLocation)
          }
        }
      }

      foldersToDelete.each { folderURL ->
        exec {
          println folderURL + " is older than ${expiryDays} days. Set for deletion..."
          commandLine 'curl', '-X', 'DELETE', '-H', "X-JFrog-Art-Api: ${ARTIFACTORY_KEY}", "${folderURL}"
        }
      }
    }
  }
}

def BINTRAY_USER    = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.env.BINTRAY_USER
def BINTRAY_KEY     = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.env.BINTRAY_API_KEY

task calculateMetadata(type:Exec) {
     executable "curl"
     args "-X", "POST", "-H", "X-GPG-PASSPHRASE: ${ARTIFACTORY_GPG}", "-u${BINTRAY_USER}:${BINTRAY_KEY}", "https://api.bintray.com/calc_metadata/openhab/apt-repo2"
}

