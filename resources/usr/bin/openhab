#!/bin/sh

## This is a utility script to simplify the use of openHAB 2
## Intended to be used with a packaged install (.deb/.rpm)
## License information available at /usr/share/openhab2/LICENSE.txt by default

usage() {
  echo "Usage:  openhab command [options]"
  echo ""
  echo "Possible commands:"
  echo "    start                       -- Starts openHAB as a daemon service."
  echo "    stop                        -- Stops an openHAB daemon service."
  echo "    restart                     -- Stops then starts an openHAB daemon service."
  echo "    status                      -- Checks to see if openHAB is running."
  echo "    console                     -- Opens the openHAB console."
  echo "    backup [filename]           -- Stores the current configuration of openHAB."
  echo "    restore filename            -- Restores the state of openHAB to a backup."
  echo "    showlogs                    -- Displays the log messages of openHAB as they appear."
  echo ""
  exit 2
}

# Script requires options, list them if none given
if [ "$#" -eq "0" ]; then
  usage
fi

# Select between common daemon services
# Scripts are included with package
OHStart() {
  if [ -x /bin/systemctl ] ; then
    echo "Using command '/bin/systemctl start openhab2.service'..."
    /bin/systemctl start openhab2.service
  elif [ -x "/etc/init.d/openhab2" ]; then
    invokeCommand="$(which invoke-rc.d 2>/dev/null)"
    if [ -x "$invokeCommand" ]; then
      echo "Using command 'invoke-rc.d openhab2 start'..."
      invoke-rc.d openhab2 start
    else
      /etc/init.d/openhab2 start
    fi
  fi
}

# Select between common services to stop openHAB
OHStop() {
  if [ -x /bin/systemctl ]; then
    echo "Using command '/bin/systemctl --no-reload stop openhab2.service'..."
    /bin/systemctl --no-reload stop openhab2.service
  elif [ -x "/etc/init.d/openhab2" ]; then
    invokeCommand="$(which invoke-rc.d 2>/dev/null)"
    if [ -x "$invokeCommand" ]; then
      echo "Using command 'invoke-rc.d openhab2 stop'..."
      invoke-rc.d openhab2 stop
    else
      /etc/init.d/openhab2 stop
    fi
    # init.d script needs time to fully stop the service
    sleep 5
  fi
}

# Some functions require root
checkRoot() {
  if [ "$(id -u)" -ne 0 ]; then
    optionName="$1"
    echo "This option needs to run as root! (e.g. use sudo openhab $optionName ..)" >&2
    exit 1
  fi
}

# Load any possible custom directory
if [ -r /etc/default/openhab2 ]; then
  . /etc/default/openhab2
fi

# Read and set openHAB variables set in /etc/default/openhab
# Otherwise, use the defaults set from package install
if [ -z "${OPENHAB_HOME}" ];       then OPENHAB_HOME="/usr/share/openhab2"; fi
if [ -z "${OPENHAB_RUNTIME}" ];    then OPENHAB_RUNTIME="${OPENHAB_HOME}/runtime"; fi
if [ -z "${OPENHAB_LOGDIR}" ];     then OPENHAB_LOGDIR="/var/log/openhab2"; fi
export OPENHAB_HOME
export OPENHAB_RUNTIME
export OPENHAB_LOGDIR

option="$1"
shift

# Select between options
case "$option" in
  "start")
    checkRoot "$option"
    OHStart
    ;;
  "stop")
    checkRoot "$option"
    OHStop
    ;;
  "restart")
  checkRoot "$option"
  if [ -x /bin/systemctl ]; then
    echo "Using command '/bin/systemctl restart openhab2.service'..."
    /bin/systemctl restart openhab2.service
  else
    OHStop
    OHStart
  fi
    ;;
  "console"|"client")
    # Assume defaults for the Karaf client
    "$OPENHAB_RUNTIME/bin/client"
    ;;
  "backup")
    # Run the premade backup script
    filename="$1"
    "$OPENHAB_RUNTIME/bin/backup" "$filename"
    ;;
  "restore")
    # Run some basic checks before running the restore script
    checkRoot "$option"
    filename="$1"
    if [ -f "$filename" ]; then
      "$OPENHAB_RUNTIME/bin/restore" "$filename"
    else
      echo "Restore needs a valid backup file to continue."
      usage
    fi
    ;;
  "showlogs"|"logs")
    # Use multitail if available, otherwise use standard tail
    if [ -x "/usr/bin/multitail" ]; then
      multitail "${OPENHAB_LOGDIR:?}/"*.log
    else
      tail -f "${OPENHAB_LOGDIR:?}"/*.log
    fi
    ;;
  "status")
    # Use systemctl's status function by default.
    if [ -x /bin/systemctl ]; then
      echo "Using command '/bin/systemctl status openhab2'..."
      checkRoot "$option"
      /bin/systemctl status openhab2.service
    else
      # Otherwise, find the java process responsible for openHAB
      existingPID="$(ps aux --sort=start_time | grep "openhab2.*java" | grep -v grep | awk '{print $2}' | tail -1)"
      if [ -z "$existingPID" ]; then
        echo "openHAB is not running."
      else
        echo "openHAB is running with PID: $existingPID"
      fi
    fi
    ;;
  *)
   # Default to showing available commands
    echo "Unrecognised command: $option"
    usage
    ;;
esac
