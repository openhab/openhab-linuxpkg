#!/bin/sh

## This is a utility script to simplify the use of openHAB 2
## Intended to be used with a packaged install (.deb/.rpm)
## License information available at /usr/share/openhab2/LICENSE.txt by default

usage() {
  echo "Usage:  openhab-cli command [options]"
  echo ""
  echo "Possible commands:"
  echo "    start [--debug]             -- Starts openHAB in the terminal."
  echo "    stop                        -- Stops any running instance of openHAB."
  echo "    status                      -- Checks to see if openHAB is running."
  echo "    console                     -- Opens the openHAB console."
#  echo "    backup [filename]           -- Stores the current configuration of openHAB."
#  echo "    restore filename            -- Restores the state of openHAB to a backup."
  echo "    showlogs                    -- Displays the log messages of openHAB as they appear."
  echo "    info                        -- Displays distribution information."
  echo ""
  exit 2
}

# Script requires options, list them if none given
if [ "$#" -eq "0" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
  usage
fi

# Some functions require root
checkRoot() {
  if [ "$(id -u)" -ne 0 ]; then
    optionName="$1"
    echo "This option needs to run as root! (e.g. use 'sudo openhab-cli $optionName')" >&2
    exit 1
  fi
}

# Load the default directory paths and any possible custom ones set
if [ -r /etc/profile.d/openhab2.sh ]; then
  . /etc/profile.d/openhab2.sh
elif [ -r /etc/default/openhab2 ]; then
  . /etc/default/openhab2
fi

option="$1"
shift

# Select between options
case "$option" in

  "start"|"stop"|"restart"|"status")
    # Deamon scripts already exist, encourge the user to use them.
    if [ "$option" = "status" ];then
      optionVerb="find the status of"
    else
      optionVerb="$option"
    fi

    # Find the appropriate daemon tool
    if [ -x "/bin/systemctl" ] && [ -f "/usr/lib/systemd/system/openhab2.service" ]; then
      echo "A systemd service configuration exists..."
      echo "Use 'sudo /bin/systemctl $option openhab2.service' to $optionVerb an openHAB service"
    elif [ -x "/etc/init.d/openhab2" ]; then
      echo "An init.d script exists..."
      if [ -x "$(which invoke-rc.d 2>/dev/null)" ]; then
        echo "Use 'sudo invoke-rc.d openhab2 $option' to $optionVerb an openHAB service."
      else
        echo "Use 'sudo /etc/init.d/openhab2 $option' to $optionVerb an openHAB service."
      fi
    fi

    # Then, do as asked with the 'manual' openHAB scripts...
    if [ "$option" = "start" ]; then
      echo "Launching an instance in this terminal.."
      checkRoot "$option"
      if [ "$1" = "--debug" ] || [ "$1" = "-d" ]; then
        "$OPENHAB_HOME/start_debug.sh"
      else
        "$OPENHAB_HOME/start.sh"
      fi

    # Karaf script will stop an instance or warn the user if nothing is running.
    elif [ "$option" = "stop" ]; then
      echo "Stopping any instance of openHAB..."
      checkRoot "$option"
      "$OPENHAB_RUNTIME/bin/stop"

    # If openHAB is running, echo the PID.
    elif [ "$option" = "status" ]; then
      existingPID="$(pgrep -f "openhab2.*java")"
      if [ -z "$existingPID" ]; then
        echo "openHAB is not running."
      else
        existingTime="$(ps -o etime= -p "$existingPID")"
        echo "openHAB is running with PID: $existingPID and has been running for $existingTime"
      fi
    fi
    ;;

  "console"|"client")
    # Assume defaults for the Karaf client
    "$OPENHAB_RUNTIME/bin/client"
    ;;

## Backup and Restore functions available in 2.2.0
#  "backup")
#    # Run the premade backup script
#    filename="$1"
#    "$OPENHAB_RUNTIME/bin/backup" "$filename"
#    ;;

#  "restore")
#    # Run some basic checks before running the restore script
#    checkRoot "$option"
#    filename="$1"
#    if [ -f "$filename" ]; then
#      "$OPENHAB_RUNTIME/bin/restore" "$filename"
#    else
#      echo "Restore needs a valid backup file to continue."
#      echo "  e.g. 'sudo openhab-cli restore backup.zip'"
#    fi
#    ;;

  "showlogs"|"logs")
    tail -f "${OPENHAB_LOGDIR:?}"/*.log
    ;;

  "info")
    openHABVersion="$(awk '/openhab-distro/{print $3}' "$OPENHAB_USERDATA/etc/version.properties")"
    if test "${openHABVersion#*SNAPSHOT}" != "SNAPSHOT"; then
      buildNumber="($(awk '/build-no/{print $4}' "$OPENHAB_USERDATA/etc/version.properties"))"
    fi
    pid="$(pgrep -f "openhab2.*java")"
    if [ -n "$pid" ]; then
      uid=$(awk '/^Uid:/{print $2}' "/proc/$pid/status")
      openHABUser="$(getent passwd "$uid" | awk -F: '{print $1}')"
      userStatus="(Active Process $pid)"
    elif [ -n "$OPENHAB_USER" ]; then
      openHABUser="$OPENHAB_USER"
      userStatus="(Environment Variable Set)"
    else
      openHABUser="$(ls -ld "$OPENHAB_HOME" | awk '{print $3}')"
      userStatus="(Owner of home directory)"
    fi
    groupsList="$(id -Gn "$openHABUser")"
    localIP="$(hostname -I | awk '{print $1}')"
    printf "%-15s %s %s\\n" "Version:" "$openHABVersion" "$buildNumber"
    printf "%-15s %s %s\\n" "User:" "$openHABUser" "$userStatus"
    printf "%-15s %s\\n" "User Groups:" "$groupsList"
    printf "\\n"
    printf "%-15s %-16s | %-30s | %s\\n" "Directories:" "Folder Name" "Path" "User:Group"
    printf "%-15s %-16s | %-30s | %s\\n" " " "-----------" "----" "----------"
    for folderName in "OPENHAB_HOME" "OPENHAB_RUNTIME" "OPENHAB_USERDATA" "OPENHAB_CONF" "OPENHAB_LOGDIR" "OPENHAB_BACKUPS"
    do
      folderPath=$(printenv $folderName)
      if [ -d "$folderPath" ]; then
        folderUserGroup=$(ls -ld "$folderPath" | awk '{print $3 ":" $4}')
        printf "%-15s %-16s | %-30s | %s\\n" " " "$folderName" "$folderPath" "$folderUserGroup"
      fi
    done
    printf "\\n"
    printf "%-15s %s\\n" "Dashboard URLs:" "http://$localIP:$OPENHAB_HTTP_PORT"
    printf  "%-15s %s\\n" "" "https://$localIP:$OPENHAB_HTTPS_PORT"
    ;;

  *)
    # Default to showing available commands
    echo "Unrecognised command: $option"
    usage
    ;;
esac
