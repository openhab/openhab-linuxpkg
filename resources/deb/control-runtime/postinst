#!/bin/sh

UD_TMP=/var/lib/openhab2/tmp
RESTART_FLAG_FILE=/var/lib/openhab2/.restartOnUpgrade

set -e
if [ x"${OH_DOCKER_INSTALLATION}" != x ]; then
	echo "docker installation \"${OH_DOCKER_INSTALLATION}\""
	exit 0
fi

[ -f /etc/default/openhab2 ] && . /etc/default/openhab2

startOpenHAB() {
	if [ -x /bin/systemctl ] ; then
		/bin/systemctl start openhab2.service
	elif [ -x "/etc/init.d/openhab2" ]; then
		if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
			invoke-rc.d openhab2 start
		else
			/etc/init.d/openhab2 start
		fi
	fi
	return 0
}

restartIfFlagFileExists(){
	if [ -f ${RESTART_FLAG_FILE} ]; then
		rm -f ${RESTART_FLAG_FILE}
		startOpenHAB
	fi
	return 0
}

case "$1" in
	configure)
		if [ -z $2 ] ; then
			# this is a fresh installation
			if [ -x /bin/systemctl ] ; then
				echo "### NOT starting on installation, please execute the following statements to configure openHAB to start automatically using systemd"
				echo " sudo /bin/systemctl daemon-reload"
				echo " sudo /bin/systemctl enable openhab2.service"
				echo "### You can start openhab2 by executing"
				echo " sudo /bin/systemctl start openhab2.service"
			elif [ -x /usr/sbin/update-rc.d ] ; then
				echo "### NOT starting openhab2 by default on bootup, please execute"
				echo " sudo update-rc.d openhab2 defaults"
				echo "### In order to start openhab2, execute"
				echo " sudo /etc/init.d/openhab2 start"
			fi
		else
			# this is an upgrade
			OH_USER=openhab
			OH_GROUP=openhab
			if [ x"${USER_AND_GROUP}" != x ]; then
				OH_USER=`echo ${USER_AND_GROUP} | cut -d ":" -f 1`
				OH_GROUP=`echo ${USER_AND_GROUP} | cut -d ":" -f 2`
			fi
			mkdir -p $UD_TMP
			chown -R "$OH_USER:$OH_GROUP" $UD_TMP
			if [ -x /bin/systemctl ] ; then
				/bin/systemctl daemon-reload 2>/dev/null 2>&1
			fi
			restartIfFlagFileExists
		fi
		;;
esac

exit 0
