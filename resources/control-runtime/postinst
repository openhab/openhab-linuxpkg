#!/bin/sh
#
# Executed after the installation of the new package
#
# On .deb based systems:
#   $1=configure            : On installation or upgrade
#   $2=*                    : On upgrade, unset otherwise
#
# On .rpm based systems:
#   $1=1                    : On installation
#   $1=2                    : On upgrade

UD_TMP=/var/lib/openhab/tmp
RESTART_FLAG_FILE=/var/lib/openhab/.restartOnUpgrade
OLD_VERSION_FILE=/var/lib/openhab/.previousVersion
OPENHAB_TEXT='[\033[1;33mopenHAB\033[0m]'
WHITESP_TEXT='         '

set -e
if [ x"${OH_DOCKER_INSTALLATION}" != x ]; then
    echo "docker installation \"${OH_DOCKER_INSTALLATION}\""
    exit 0
fi

if [ -r /etc/profile.d/openhab.sh ]; then
  . /etc/profile.d/openhab.sh
elif [ -r /etc/default/openhab ]; then
  . /etc/default/openhab
fi

resetEnv(){
  unset OPENHAB_HTTP_PORT
  unset OPENHAB_HTTPS_PORT
  unset OPENHAB_HOME
  unset OPENHAB_CONF
  unset OPENHAB_RUNTIME
  unset OPENHAB_USERDATA
  unset OPENHAB_BACKUPS
  unset OPENHAB_LOGDIR
  unset OPENHAB_USER
  unset OPENHAB_GROUP

  if [ -f /etc/profile.d/openhab2.sh ]; then
    rm -f /etc/profile.d/openhab2.sh
  fi

  if [ -r /etc/profile.d/openhab.sh ]; then
    . /etc/profile.d/openhab.sh
  fi
}


startOpenHAB() {
  if [ -x /bin/systemctl ] ; then
    /bin/systemctl start openhab.service
  elif [ -x "/etc/init.d/openhab" ]; then
    if [ -x "$(which invoke-rc.d 2>/dev/null)" ]; then
      invoke-rc.d openhab start
    else
      /etc/init.d/openhab start
    fi
  fi
  return 0
}

# Check to see if openHAB is currently running
findpid() {
  OH_USER=openhab
  if [ x"${USER_AND_GROUP}" != x ]; then
    OH_USER=$(echo "${USER_AND_GROUP}" | cut -d ":" -f 1)
  fi
  pgrep -f 'openhab.*java'
}

waitForStopFinished(){
  # this is a workaround for upgrading from deb installations prior to 2.0.0
  timeout=0
  pid=$(findpid)
  if [  x"$pid" != x ]; then
    printf "Waiting for the openHAB service to stop "
    while kill -0 "$pid" 2>/dev/null ; do
      if [ $timeout -eq 20 ]; then
        # finally kill the process if timeout is reached
        echo "killing the openHAB service with pid $pid"
        kill -9 "$pid"
        break
      else
        printf "."
        timeout=$((timeout+1))
        sleep 1
      fi
    done
    echo ""
  fi
  return 0
}

restartIfFlagFileExists(){
  if [ -f ${RESTART_FLAG_FILE} ]; then
    rm -f ${RESTART_FLAG_FILE}
    waitForStopFinished
    startOpenHAB
  else
    printf "${OPENHAB_TEXT} openHAB was not running so will not start after upgrade.\n"
    if [ -x /bin/systemctl ] ; then
      printf "${OPENHAB_TEXT} Please use the command:\n"
      echo "${WHITESP_TEXT}   sudo /bin/systemctl start openhab.service"
    elif [ -x /usr/sbin/update-rc.d ] ; then
      printf "${OPENHAB_TEXT} Please use the command:\n"
      echo "${WHITESP_TEXT}   sudo /etc/init.d/openhab start"
    else
      echo ""
    fi
    echo ""
  fi
  return 0
}

checkJava(){
  # Java must be at least version 8, check for this
  VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | sed -e 's/_.*//g; s/^1\.//g; s/\..*//g; s/-.*//g;')
  if [ -z "$VERSION" ] || [ "${VERSION}" -lt "11" ]; then
    printf "${OPENHAB_TEXT} WARNING: We were unable to detect Java 11 on your system. This is needed before openHAB can be started.\n"
    printf "${OPENHAB_TEXT} Please install the current version of Java 11 or check the openHAB documentation for details."
    echo ""
  fi
}

getVersionNumber(){
  firstPart="$(echo "$1" | awk -F'.' '{print $1}')"
  secondPart="$(echo "$1" | awk -F'.' '{print $2}')"
  thirdPart="$(echo "$1" | awk -F'.' '{print $3}')"
  thirdPart="${thirdPart%%-*}"
  echo $((firstPart*10000+secondPart*100+thirdPart))
}

runCommand() {
    string="$1"

    string="$(echo "$string" | sed "s:\$OPENHAB_USERDATA:${OPENHAB_USERDATA:?}:g")"
    string="$(echo "$string" | sed "s:\$OPENHAB_CONF:${OPENHAB_CONF:?}:g")"
    string="$(echo "$string" | sed "s:\$OPENHAB_HOME:${OPENHAB_HOME:?}:g")"

    command="$(echo "$string" | awk -F';' '{print $1}')"
    param1="$(echo "$string" | awk -F';' '{print $2}')"
    param2="$(echo "$string" | awk -F';' '{print $3}')"
    param3="$(echo "$string" | awk -F';' '{print $4}')"

    case $command in
      'DELETE')
      if [ -f "$param1" ]; then
        echo "  Deleting File: $param1"
        rm -f "$param1"
      fi
    ;;
    'DELETEDIR')
      if [ -d "$param1" ]; then
        echo "  Deleting Directory: $param1"
        rm -rf "$param1"
      fi
    ;;
    'MOVE')
      if [ -f "$param1" ]; then
        echo "  Moving:   From $param1 to $param2"
        fileDir=$(dirname "$param2")
        if [ ! -d fileDir ]; then
          mkdir -p "$fileDir"
          prevUserGroup=$(ls -ld "$param1" | awk '{print $3 ":" $4}')
          chown -R "$prevUserGroup" "$fileDir"
        fi
        mv "$param1" "$param2"
      fi
    ;;
    'REPLACE')
      # Avoid error if file does not exist
      if [ -f "$param3" ]; then
        echo "  Replacing: String $param1 to $param2 in file $param3"
        sed -i "s:$param1:$param2:g" "$param3"
      fi
    ;;
    'NOTE')  printf '  \033[32mNote:\033[m     %s\n' "$param1";;
    'ALERT') printf '  \033[31mWarning:\033[m  %s\n' "$param1";;
    esac
}

scanVersioningList() {
  Section="$1"
  VersionMessage="$2"
  InSection=false
  InNewVersion=false
  oldVersionNumber=$(getVersionNumber "$oldVersion")

  ## Snapshots should always use the latest update list.
  case $oldVersion in
    *"-"* | *"."*"."*"."*) oldVersionNumber=$((oldVersionNumber-1));;
  esac

  ## Read the file line by line.
  while IFS= read -r Line
  do
    case $Line in
    '')
      continue
    ;;
    ## Flag to run the relevant [[section]] only.
    "[[$Section]]")
      InSection=true
    ;;
    ## Stop reading the file if another [[section]] starts.
    "[["*"]]")
      if $InSection; then
        break
      fi
    ;;
    ## Detect the [version] and execute the line if relevant.
    '['*'.'*'.'*']')
      if $InSection; then
        LineVersion="$(echo "$Line" | awk -F'[][]' '{print $2}')"
        LineVersionNumber=$(getVersionNumber "$LineVersion")
        if [ "$oldVersionNumber" -lt "$LineVersionNumber" ]; then
          InNewVersion=true
          echo ""
          printf "$VersionMessage $LineVersion:\n"
        else
          InNewVersion=false
        fi
      fi
    ;;
    *)
      if $InSection && $InNewVersion; then
        runCommand "$Line"
      fi
    ;;
    esac
  done < "/usr/share/openhab/runtime/bin/update.lst"
}

case "$1" in
  configure|1|2)
    OH_USER=openhab
    OH_GROUP=openhab
    for pGroup in bluetooth tty dialout audio
    do
      if ! id -nG "$OH_USER" | grep -qw "$pGroup"; then
        if getent group $pGroup > /dev/null 2>&1 ; then
          usermod -a -G $pGroup $OH_USER
        fi
      fi
    done
    resetEnv
    if [ -z "$2" ] && [ "$1" != 2 ] ; then
      # this is a fresh installation
      if [ -f /var/lib/openhab/.copiedToOH3 ]; then
        oldVersion="2.9.9"
        printf "${OPENHAB_TEXT} Previous 2.x install detected, making necessary changes"
        scanVersioningList "POST" "${OPENHAB_TEXT} Performing post-update tasks for version"
        scanVersioningList "MSG" "${OPENHAB_TEXT} Listing important changes for version"
        if [ -d /var/lib/openhab/config ]; then
          find /var/lib/openhab/config/ -type f -name "*.config" -exec sed -i'.bak' 's|/var/lib/openhab2/|/var/lib/openhab/|g' {} \;
          find /var/lib/openhab/config/ -type f -name "*.config" -exec sed -i'.bak' 's|/usr/share/openhab2/|/usr/share/openhab/|g' {} \;
        fi
        rm -f /var/lib/openhab/.copiedToOH3
      fi

      if [ -x /bin/systemctl ] ; then
        rm -f /etc/init.d/openhab
        printf "${OPENHAB_TEXT} Please use the following commands to launch openHAB on a system restart.\n"
        echo "${WHITESP_TEXT}   sudo /bin/systemctl daemon-reload"
        echo "${WHITESP_TEXT}   sudo /bin/systemctl enable openhab.service"
        echo ""
        printf "${OPENHAB_TEXT} You can start openHAB manually by executing the command:\n"
        echo "${WHITESP_TEXT}   sudo /bin/systemctl start openhab.service"
      elif [ -x /usr/sbin/update-rc.d ] ; then
        printf "${OPENHAB_TEXT} Please use the following commands to launch openHAB on a system restart.\n"
        echo "${WHITESP_TEXT}   sudo update-rc.d openhab defaults"
        echo ""
        printf "${OPENHAB_TEXT} You can start openHAB manually by executing the command:\n"
        echo "${WHITESP_TEXT}   sudo /etc/init.d/openhab start"
      else
        echo ""
      fi
      echo ""
      checkJava
    else
      # this is an upgrade
      if [ x"${USER_AND_GROUP}" != x ]; then
        OH_USER=$(echo "${USER_AND_GROUP}" | cut -d ":" -f 1)
        OH_GROUP=$(echo "${USER_AND_GROUP}" | cut -d ":" -f 2)
      fi

      mkdir -p $UD_TMP
      chown -R "$OH_USER:$OH_GROUP" $UD_TMP
      if [ -x /bin/systemctl ] ; then
        rm -f /etc/init.d/openhab
        /bin/systemctl daemon-reload 2>/dev/null 2>&1
      fi
      if [ -f ${OLD_VERSION_FILE} ]; then
        oldVersion="$(cat ${OLD_VERSION_FILE})"
        rm -f ${OLD_VERSION_FILE}
        scanVersioningList "POST" "${OPENHAB_TEXT} Performing post-update tasks for version"
        scanVersioningList "MSG" "${OPENHAB_TEXT} Listing important changes for version"
      fi
      echo ""
      checkJava
      restartIfFlagFileExists
    fi
    ;;
esac

exit 0
