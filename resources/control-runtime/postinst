#!/bin/sh
#
# Executed after the installation of the new package
#
# On .deb based systems:
#   $1=configure            : On installation or upgrade
#   $2=*                    : On upgrade, unset otherwise
#
# On .rpm based systems:
#   $1=1                    : On installation
#   $1=2                    : On upgrade

UD_TMP=/var/lib/openhab2/tmp
RESTART_FLAG_FILE=/var/lib/openhab2/.restartOnUpgrade
OLD_VERSION_FILE=/var/lib/openhab2/.previousVersion
OPENHAB_TEXT='[\033[1;33mopenHAB\033[0m]'
WHITESP_TEXT='         '

set -e
if [ x"${OH_DOCKER_INSTALLATION}" != x ]; then
    echo "docker installation \"${OH_DOCKER_INSTALLATION}\""
    exit 0
fi

[ -f /etc/default/openhab2 ] && . /etc/default/openhab2

startOpenHAB() {
  if [ -x /bin/systemctl ] ; then
    /bin/systemctl daemon-reload
    /bin/systemctl start openhab2.service
  elif [ -x "/etc/init.d/openhab2" ]; then
    if [ -x "$(which invoke-rc.d 2>/dev/null)" ]; then
      invoke-rc.d openhab2 start
    else
      /etc/init.d/openhab2 start
    fi
  fi
  return 0
}

# Check to see if openHAB is currently running
findpid() {
  OH_USER=openhab
  if [ x"${USER_AND_GROUP}" != x ]; then
    OH_USER=$(echo "${USER_AND_GROUP}" | cut -d ":" -f 1)
  fi
  ps aux -u "$OH_USER" --sort=start_time 2>/dev/null | grep openhab.*java | grep -v grep | awk '{print $2}' | tail -1
}

waitForStopFinished(){
  # this is a workaround for upgrading from deb installations prior to 2.0.0
  timeout=0
  pid=$(findpid)
  if [  x"$pid" != x ]; then
    printf "Waiting for the openHAB service to stop "
    while kill -0 "$pid" 2>/dev/null ; do
      if [ $timeout -eq 20 ]; then
        # finally kill the process if timeout is reached
        echo "killing the openHAB service with pid $pid"
        kill -9 "$pid"
        break
      else
        printf "."
        timeout=$((timeout+1))
        sleep 1
      fi
    done
    echo ""
  fi
  return 0
}

restartIfFlagFileExists(){
  if [ -f ${RESTART_FLAG_FILE} ]; then
    rm -f ${RESTART_FLAG_FILE}
    waitForStopFinished
    startOpenHAB
  else
    printf "${OPENHAB_TEXT} openHAB was not running so will not start after upgrade.\n"
    if [ -x /bin/systemctl ] ; then
      printf "${OPENHAB_TEXT} Please use the command:\n"
      echo "${WHITESP_TEXT}   sudo /bin/systemctl start openhab2.service"
    elif [ -x /usr/sbin/update-rc.d ] ; then
      printf "${OPENHAB_TEXT} Please use the command:\n"
      echo "${WHITESP_TEXT}   sudo /etc/init.d/openhab2 start"
    else
      echo ""
    fi
    echo ""
  fi
  return 0
}

checkJava(){
  # Java must be at least version 8, check for this
  VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | sed -e 's/_.*//g; s/^1\.//g; s/\..*//g; s/-.*//g;')
  if [ -z "$VERSION" ] || [ "${VERSION}" -lt "8" ]; then
    printf "${OPENHAB_TEXT} WARNING: We were unable to detect Java 8 on your system. This is needed before openHAB can be started.\n" 
    printf "${OPENHAB_TEXT} Please install the current version of Java 8 or check the openHAB documentation for details."
    echo ""
  fi
}

getVersionNumber(){
  firstPart="$(echo "$1" | awk -F'.' '{print $1}')"
  secondPart="$(echo "$1" | awk -F'.' '{print $2}')"
  thirdPart="$(echo "$1" | awk -F'.' '{print $3}')"
  thirdPart="${thirdPart%%-*}"
  echo $((firstPart*10000+secondPart*100+thirdPart))
}

runCommand() {
    string="$1"

    command="$(echo "$string" | awk -F';' '{print $1}')"
    param1="$(echo "$string" | awk -F';' '{print $2}')"

    case $command in
    'NOTE')  printf '  \033[32mNote:\033[m     %s\n' "$param1";;
    'ALERT') printf '  \033[31mWarning:\033[m  %s\n' "$param1";;
    esac
}

scanVersioningList() {
  Section="$1"
  VersionMessage="$2"
  InSection=false
  InNewVersion=false
  oldVersionNumber=$(getVersionNumber "$oldVersion")

  ## Read the file line by line.
  while IFS= read -r Line
  do
    case $Line in
    '')
      continue
    ;;
    ## Flag to run the relevant [[section]] only.
    "[[$Section]]")
      InSection=true
    ;;
    ## Stop reading the file if another [[section]] starts.
    "[["*"]]")
      if $InSection; then
        break
      fi
    ;;
    ## Detect the [version] and execute the line if relevant.
    '['*'.'*'.'*']')
      if $InSection; then
        LineVersion="$(echo "$Line" | awk -F'[][]' '{print $2}')"
        LineVersionNumber=$(getVersionNumber "$LineVersion")
        if [ "$oldVersionNumber" -le "$LineVersionNumber" ]; then
          InNewVersion=true
          echo ""
          printf "$VersionMessage $LineVersion:\n"
        else
          InNewVersion=false
        fi
      fi
    ;;
    *)
      if $InSection && $InNewVersion; then
        runCommand "$Line"
      fi
    ;;
    esac
  done < "/usr/share/openhab2/runtime/bin/update.lst"
}

case "$1" in
  configure|1|2)
    if [ -z "$2" ] && [ "$1" != 2 ] ; then
      # this is a fresh installation
      if [ -x /bin/systemctl ] ; then
        printf "${OPENHAB_TEXT} Please use the following commands to launch openHAB on a system restart.\n"
        echo "${WHITESP_TEXT}   sudo /bin/systemctl daemon-reload"
        echo "${WHITESP_TEXT}   sudo /bin/systemctl enable openhab2.service"
        echo ""
        printf "${OPENHAB_TEXT} You can start openhab2 manually by executing the command:\n"
        echo "${WHITESP_TEXT}   sudo /bin/systemctl start openhab2.service"
      elif [ -x /usr/sbin/update-rc.d ] ; then
        printf "${OPENHAB_TEXT} Please use the following commands to launch openHAB on a system restart.\n"
        echo "${WHITESP_TEXT}   sudo update-rc.d openhab2 defaults"
        echo ""
        printf "${OPENHAB_TEXT} You can start openhab2 manually by executing the command:\n"
        echo "${WHITESP_TEXT}   sudo /etc/init.d/openhab2 start"
      else
        echo ""
      fi
      echo ""
      checkJava
    else
      # this is an upgrade
      OH_USER=openhab
      OH_GROUP=openhab
      if [ x"${USER_AND_GROUP}" != x ]; then
        OH_USER=$(echo "${USER_AND_GROUP}" | cut -d ":" -f 1)
        OH_GROUP=$(echo "${USER_AND_GROUP}" | cut -d ":" -f 2)
      fi

      rm -f /var/lib/openhab2/etc/org.openhab.addons.cfg

      mkdir -p $UD_TMP
      chown -R "$OH_USER:$OH_GROUP" $UD_TMP
      if [ -x /bin/systemctl ] ; then
        /bin/systemctl daemon-reload 2>/dev/null 2>&1
      fi
      if [ -f ${OLD_VERSION_FILE} ]; then
        oldVersion="$(cat ${OLD_VERSION_FILE})"
        rm -f ${OLD_VERSION_FILE}
        scanVersioningList "MSG" "${OPENHAB_TEXT} Listing important changes for version"
      fi
      echo ""
      checkJava
      restartIfFlagFileExists
    fi
    ;;
esac

exit 0
